/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.vpc.upa.filters;

import net.vpc.upa.AccessLevel;
import net.vpc.upa.EffectiveFieldModifier;
import net.vpc.upa.Field;
import net.vpc.upa.exceptions.UPAException;

import java.util.List;

/**
 * @author Taha BEN SALAH <taha.bensalah@gmail.com>
 */
public class Fields extends AbstractFieldFilter {
    private static Fields DYNAMIC = as(new FieldDynamicFilter());
    private static Fields REGULAR = as(new FieldRegularFilter());
    private static Fields ANY = as(new FieldAnyFilter());
    private static Fields NONE = as(new FieldAnyFilter()).negate();
    private static Fields PRIMITIVE = as(new FieldPrimitiveFilter(null));

    private FieldFilter base;

    private Fields(FieldFilter base) {
        this.base = base;
    }

    public static Fields as(FieldFilter base) {
        if (base == null) {
            return any();
        }
        if (base instanceof Fields) {
            return (Fields) base;
        }
        return new Fields(base);
    }

    public static Fields any() {
        return ANY;
    }

    public static Fields regular() {
        return REGULAR;
    }

    public static Fields dynamic() {
        return DYNAMIC;
    }

    public static Fields none() {
        return NONE;
    }

    public static Fields primitive() {
        return PRIMITIVE;
    }

    public static Fields byInsertAccessLevel(AccessLevel... accepted) {
        return new Fields(FieldAccessLevelFilter.forInsert(accepted));
    }

    public static Fields byUpdateAccessLevel(AccessLevel... accepted) {
        return new Fields(FieldAccessLevelFilter.forUpdate(accepted));
    }

    public static Fields bySelectAccessLevel(AccessLevel... accepted) {
        return new Fields(FieldAccessLevelFilter.forSelect(accepted));
    }

    public static Fields byAllAccessLevel(AccessLevel... accepted) {
        return new Fields(FieldAccessLevelFilter.forAll(accepted));
    }

    public static Fields byModifiersAllOf(EffectiveFieldModifier... accepted) {
        FieldModifierFilter fieldModifierFilter = new FieldModifierFilter();
        fieldModifierFilter = fieldModifierFilter.isAllOf(accepted);
        return new Fields(fieldModifierFilter);
    }

    public static Fields byModifiersNotAllOf(EffectiveFieldModifier... accepted) {
        FieldModifierFilter fieldModifierFilter = new FieldModifierFilter();
        fieldModifierFilter = fieldModifierFilter.isNotAllOf(accepted);
        return new Fields(fieldModifierFilter);
    }

    public static Fields byModifiersNoneOf(EffectiveFieldModifier... accepted) {
        FieldModifierFilter fieldModifierFilter = new FieldModifierFilter();
        fieldModifierFilter = fieldModifierFilter.isNoneOf(accepted);
        return new Fields(fieldModifierFilter);
    }

    public static Fields byModifiersAnyOf(EffectiveFieldModifier... accepted) {
        FieldModifierFilter fieldModifierFilter = new FieldModifierFilter();
        fieldModifierFilter = fieldModifierFilter.isAnyOf(accepted);
        return new Fields(fieldModifierFilter);
    }

    public static Fields byName(String... acceptedFields) {
        return as(new FieldNameFilter(acceptedFields));
    }

    public static Fields byName(List<String> acceptedFields) {
        return as(new FieldNameFilter(acceptedFields));
    }

    public static Fields byList(Field... acceptedFields) {
        return as(new FieldListFilter(acceptedFields));
    }

    public static Fields byList(List<Field> acceptedFields) {
        return as(new FieldListFilter(acceptedFields));
    }

    public static Fields byType(Class<? extends Field> type) {
        return as(new FieldTypeFilter(type));
    }


    public Fields byPrimitive() {
        return as(new FieldPrimitiveFilter(base));
    }

    public Fields and(FieldFilter other) {
        return as(FieldAndFilter.and(base, other));
    }

    public Fields andNot(FieldFilter other) {
        return and(new FieldReverseFilter(other));
    }

    public Fields or(FieldFilter other) {
        return new Fields(FieldOrFilter.or(base, other));
    }

    public Fields orNot(FieldFilter other) {
        return or(new FieldReverseFilter(other));
    }

    public Fields negate() {
        return new Fields(new FieldReverseFilter(base));
    }

    @Override
    public boolean acceptDynamic() throws UPAException {
        return base.acceptDynamic();
    }

    @Override
    public boolean accept(Field f) throws UPAException {
        return base.accept(f);
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 97 * hash + (this.base != null ? this.base.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Fields other = (Fields) obj;
        if (this.base != other.base && (this.base == null || !this.base.equals(other.base))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return String.valueOf(base);
    }

}
