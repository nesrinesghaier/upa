package net.vpc.upa.filters;

import net.vpc.upa.Field;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @author Taha BEN SALAH <taha.bensalah@gmail.com>
 */
public class FieldOrFilter extends AbstractFieldFilter {

    private FieldFilter[] v = new FieldFilter[0];

    public FieldOrFilter(FieldFilter... filters) {
        this(Arrays.asList(filters));
    }

    public FieldOrFilter(List<FieldFilter> filters) {
        ArrayList<FieldFilter> all = new ArrayList<FieldFilter>();
        for (FieldFilter a : filters) {
            if (a != null) {
                all.add(a);
            }
        }
        v = all.toArray(new FieldFilter[all.size()]);
    }

    public List<FieldFilter> getChildren() {
        return Arrays.asList(v);
    }

    public static FieldOrFilter or(FieldFilter... filters) {
        ArrayList<FieldFilter> all = new ArrayList<FieldFilter>();
        for (FieldFilter filter : filters) {
            if (filter != null) {
                if (filter instanceof FieldOrFilter) {
                    all.addAll(((FieldOrFilter) filter).getChildren());
                } else {
                    all.add(filter);
                }
            }
        }
        return new FieldOrFilter(all);
    }

    public FieldOrFilter or(FieldFilter filter) {
        if (filter != null) {
            if (filter instanceof FieldOrFilter) {
                ArrayList<FieldFilter> all = new ArrayList<FieldFilter>();
                all.addAll(Arrays.asList(v));
                all.addAll(((FieldOrFilter) filter).getChildren());
                return new FieldOrFilter(all);
            } else {
                ArrayList<FieldFilter> all = new ArrayList<FieldFilter>();
                all.addAll(Arrays.asList(v));
                all.add(filter);
                return new FieldOrFilter(all);
            }
        } else {
            return this;
        }
    }

    public boolean accept(Field field) {
        for (FieldFilter fieldFilter : v) {
            if (!fieldFilter.accept(field)) {
                return false;
            }
        }
        return true;
    }

    @Override
    public boolean acceptDynamic() {
        for (FieldFilter fieldFilter : v) {
            if (fieldFilter.acceptDynamic()) {
                return true;
            }
        }
        return false;
    }

    @Override
    public String toString() {
        if (v.length == 0) {
            return "false";
        } else if (v.length == 1) {
            return v[0].toString();
        } else {
            StringBuilder b = new StringBuilder("(");
            b.append(v[0]);
            for (int i = 1; i < v.length; i++) {
                b.append(" or ");
                b.append(v[i].toString());
            }
            b.append(")");
            return b.toString();
        }
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 43 * hash + Arrays.deepHashCode(this.v);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FieldOrFilter other = (FieldOrFilter) obj;
        if (!Arrays.deepEquals(this.v, other.v)) {
            return false;
        }
        return true;
    }
}
