/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.vpc.upa.filters;

import net.vpc.upa.AccessLevel;
import net.vpc.upa.Field;
import net.vpc.upa.exceptions.UPAException;

import java.util.Arrays;
import java.util.EnumSet;
import java.util.Set;

/**
 * @author Taha BEN SALAH <taha.bensalah@gmail.com>
 */
public class FieldAccessLevelFilter extends AbstractFieldFilter {

    private boolean dynamic;
    private boolean checkInsert;
    private boolean checkUpdate;
    private boolean checkSelect;
    private EnumSet<AccessLevel> accepted;

    public static FieldAccessLevelFilter forAll(AccessLevel... accepted) {
        EnumSet<AccessLevel> all = EnumSet.noneOf(AccessLevel.class);
        all.addAll(Arrays.asList(accepted));
        return new FieldAccessLevelFilter(true, true, true, all, false);
    }

    public static FieldAccessLevelFilter forInsert(AccessLevel... accepted) {
        EnumSet<AccessLevel> all = EnumSet.noneOf(AccessLevel.class);
        all.addAll(Arrays.asList(accepted));
        return new FieldAccessLevelFilter(true, false, false, all, false);
    }

    public static FieldAccessLevelFilter forUpdate(AccessLevel... accepted) {
        EnumSet<AccessLevel> all = EnumSet.noneOf(AccessLevel.class);
        all.addAll(Arrays.asList(accepted));
        return new FieldAccessLevelFilter(false, true, false, all, false);
    }

    public static FieldAccessLevelFilter forSelect(AccessLevel... accepted) {
        EnumSet<AccessLevel> all = EnumSet.noneOf(AccessLevel.class);
        all.addAll(Arrays.asList(accepted));
        return new FieldAccessLevelFilter(false, false, true, all, false);
    }

    public FieldAccessLevelFilter(boolean checkInsert, boolean checkUpdate, boolean checkSelect, Set<AccessLevel> accepted, boolean dynamic) {
        this.checkInsert = checkInsert;
        this.checkUpdate = checkUpdate;
        this.checkSelect = checkSelect;
        this.dynamic = dynamic;
        this.accepted = EnumSet.noneOf(AccessLevel.class);
        if (accepted != null) {
            this.accepted.addAll(accepted);
        }
    }

    @Override
    public boolean acceptDynamic() throws UPAException {
        return dynamic;
    }

    @Override
    public boolean accept(Field f) throws UPAException {
        if (checkInsert) {
            if (!accepted.contains(f.getInsertAccessLevel())) {
                return false;
            }
        }
        if (checkUpdate) {
            if (!accepted.contains(f.getUpdateAccessLevel())) {
                return false;
            }
        }
        if (checkSelect) {
            if (!accepted.contains(f.getSelectAccessLevel())) {
                return false;
            }
        }
        return true;
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder();
        if (checkInsert && checkUpdate && checkSelect) {
            b.append("AnyAccessLevel").append(accepted);
        } else if (!checkInsert && !checkUpdate && !checkSelect) {
            b.append("true");
        } else {
            if (checkSelect) {
                b.append("Insert");
            }
            if (checkUpdate) {
                b.append("Update");
            }
            if (checkSelect) {
                b.append("Select");
            }
            b.append("AccessLevel").append(accepted);
        }
        return b.toString();
    }
}
