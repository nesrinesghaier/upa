package net.vpc.upa;


import java.util.*;

/**
 * Lazy holder for ObjectFactory creation.
 * ObjectFactory is created according to the following procedure :
 * <ul>
 *     <li>Look for System.getProperty("net.vpc.upa.ObjectFactory") and create root Factory, If not Found look for net.vpc.upa.RootObjectFactory</li>
 *     <li>Look for ServiceLoader.load(ObjectFactory.class) to find for extension Factories</li>
 *     <li>Sort extensions instances according to their "getContextSupportLevel()"</li>
 *     <li>Chain Factories (Each one becomes the father of the previous) and define user Factory as leaf one (with min contextSupportLevel)</li>
 *     <li>Bind root factory (as parent) to the very ancestor of the Factories Chain</li>
 * </ul>
 * @author Taha BEN SALAH <taha.bensalah@gmail.com>
 * @creationdate 1/2/13 12:53 PM
 */
@PortabilityHint(target = "C#", name = "partial")
class BootstrapObjectFactoryLazyHolder {

    static ObjectFactory INSTANCE = create();

    @PortabilityHint(target = "C#", name = "ignore")
    static ObjectFactory create() {
        ObjectFactory factory = null;
        try {

            ServiceLoader<ObjectFactory> serviceLoader = ServiceLoader.load(ObjectFactory.class);
            List<ObjectFactory> found = new ArrayList<ObjectFactory>();
            for (ObjectFactory foundFactory : serviceLoader) {
                found.add(foundFactory);
            }
            if (found.size() > 1) {
                Collections.sort(found, new Comparator<ObjectFactory>() {
                    public int compare(ObjectFactory o1, ObjectFactory o2) {
                        if (o1 == o2) {
                            return 0;
                        }
                        if (o1 == null) {
                            return -1;
                        }
                        if (o2 == null) {
                            return 1;
                        }
                        if (o1.equals(o2)) {
                            return 0;
                        }
                        return Integer.compare(o1.getContextSupportLevel(), o2.getContextSupportLevel());
                    }
                });
            }
            for (int i = found.size() - 1; i > 1; i--) {
                found.get(i).setParentFactory(found.get(i - 1));
            }
            if (found.size() > 0) {
                factory = found.get(found.size() - 1);
            }
            String key = "net.vpc.upa.ObjectFactory";
            String objectFactoryType = System.getProperty("net.vpc.upa.ObjectFactory");
            if (objectFactoryType == null) {
                objectFactoryType = "net.vpc.upa.RootObjectFactory";
                /**
                 * Any default implementation of UPA must define this class
                 * "net.vpc.upa.RootObjectFactory" RootObjectFactory should
                 * be a general purpose implementation that may be
                 * overridden by domain specific usages (i.e. web context,
                 * mobile context, ...) by ServiceLoader Mechanism.
                 * ServiceLoader Mechanism is provided for User Extensions
                 * only and should not handle DefaultObjectFactory
                 * instantiation DefaultObjectFactory must return return 0
                 * ContextSupportLevel
                 */
                System.err.println("System.getProperty(\"" + key + "\") was empty. Using " + objectFactoryType);
            }
            ObjectFactory rootFactory = null;
            ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
            Class<ObjectFactory> loadedClass = (Class<ObjectFactory>) Class.forName(objectFactoryType, true, contextClassLoader);
            rootFactory = loadedClass.newInstance();
            if (factory == null) {
                factory = rootFactory;
            } else {
                found.get(0).setParentFactory(rootFactory);
            }
        } catch (Exception e) {
            throw new RuntimeException("Unable to load net.vpc.upa.RootObjectFactory. Most likely a valid UPA Implementation is missing (up-impl for instance)", e);
        }
        return factory;
    }
}
