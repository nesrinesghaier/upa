package net.vpc.upa.persistence;

import net.vpc.upa.*;
import net.vpc.upa.exceptions.UPAException;
import net.vpc.upa.expressions.EntityStatement;

import java.util.Set;

/**
 * Created with IntelliJ IDEA. User: vpc Date: 8/16/12 Time: 1:24 AM To change
 * this template use File | Settings | File Templates.
 */
public interface PersistenceStore {

    //    public static final String CURRENT_ENTITY_ALIAS = "this";
//    public static String DB_CON_LOG = "DB_CONNECT";
//    public static String DB_QUERY_LOG = "DB_QUERY";
//    public static String DB_UPDATE_LOG = "DB_UPDATE";
//    public static String DB_EXEC_LOG = "DB_EXEC";
//    public static String DB_ERROR_LOG = "DB_ERROR";
//    //    public static final String DB_NATIVE_LOG = "DB_NATIVE";
//    public static String DB_PRE_NATIVE_UPDATE_LOG = "DB_PRE_NATIVE_UPDATE_LOG";
//    public static String DB_PRE_NATIVE_QUERY_LOG = "DB_PRE_NATIVE_QUERY_LOG";
//    public static String DB_NATIVE_QUERY_LOG = "DB_NATIVE_QUERY";
//    public static String DB_NATIVE_UPDATE_LOG = "DB_NATIVE_UPDATE";
    boolean isAccessible(ConnectionProfile connectionProfile);
    
    public String getValidIdentifier(String s);
    
    void checkAccessible(ConnectionProfile connectionProfile);

    void init(PersistenceUnit persistenceUnit, boolean readOnly, ConnectionProfile connection) throws UPAException;

    Set<ConnectionDriver> getSupportedDrivers();

    boolean isCreatedStorage() throws UPAException;

    FieldPersister createInsertSequenceGenerator(Field field) throws UPAException;

    FieldPersister createUpdateSequenceGenerator(Field field) throws UPAException;

    void createStorage() throws UPAException;

    void dropStorage() throws UPAException;

    Properties getProperties();

    ConnectionProfile getConnectionProfile() throws UPAException;

    void close() throws UPAException;

    void setReadOnly(boolean value);

    boolean isReadOnly();

    //    String getSqlTypeName(DataType datatype);
//    TypeMarshaller getTypeMarshaller(Class someClass);
//
//    TypeMarshaller getTypeMarshaller(DataType p);
//
//    TypeMarshallerFactory getTypeMarshallerFactory(Class someClass);
//
//    String formatSqlValue(Object value);
    Query createQuery(Entity e, EntityStatement query, EntityExecutionContext qlContext) throws UPAException;

    Query createQuery(EntityStatement query, EntityExecutionContext qlContext) throws UPAException;

    public void createStructure(PersistenceUnit persistenceUnit, EntityExecutionContext executionContext) throws UPAException;

    public int executeUpdate(EntityStatement query, EntityExecutionContext qlContext) throws UPAException;

    public boolean isReservedKeyword(String name);

    public EntityExecutionContext createContext(ContextOperation operation) throws UPAException;

    void setNativeConstraintsEnabled(PersistenceUnit database, boolean enable) throws UPAException;

    public boolean isComplexSelectSupported();

    public boolean isFromClauseInUpdateStatementSupported();

    public boolean isFromClauseInDeleteStatementSupported();

    public boolean isReferencingSupported();

    public boolean isViewSupported();

    public boolean isTopSupported();

    public PersistenceNameStrategy getPersistenceNameStrategy();

    public void setPersistenceNameStrategy(PersistenceNameStrategy persistenceNameStrategy);

    public String getPersistenceName(UPAObject persistentObject) throws UPAException;

    public String getPersistenceName(UPAObject persistentObject, PersistenceNameType spec) throws UPAException;

    public String getPersistenceName(String name, PersistenceNameType spec) throws UPAException;

    public PersistenceState getPersistenceState(UPAObject object, PersistenceNameType spec) throws UPAException;

    public boolean isView(Entity entity);

    public void alterPersistenceUnitAddObject(UPAObject object) throws UPAException;

    public void alterPersistenceUnitRemoveObject(UPAObject object) throws UPAException;

    public void alterPersistenceUnitUpdateObject(UPAObject oldObject, UPAObject newObject, Set<String> updates) throws UPAException;

    public boolean commitStorage() throws UPAException;

    public PersistenceUnit getPersistenceUnit();

    public void revalidateModel() throws UPAException;

    /**
     * create connection
     *
     * @return
     * @throws UPAException
     */
    public UConnection createConnection() throws UPAException;

    /**
     * create a connection and associate it to current session
     *
     * @return
     * @throws UPAException
     */
    public UConnection getConnection() throws UPAException;
}
