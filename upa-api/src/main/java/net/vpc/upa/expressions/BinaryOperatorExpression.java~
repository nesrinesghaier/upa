package net.vpc.upa.expressions;

public abstract class BinaryOperatorExpression extends DefaultExpression implements Cloneable {
    private static final long serialVersionUID = 1L;
    protected Expression left;
    protected Expression right;
    protected BinaryOperator operator;

    public BinaryOperatorExpression(BinaryOperator operator, Expression left, Object right) {
        this(operator, left, ExpressionFactory.toLiteral(right));
    }

    public BinaryOperatorExpression(BinaryOperator operator, Expression left, Expression right) {
        this.left = left;
        this.right = right;
        this.operator = operator;
    }

    public Expression getLeft() {
        return left;
    }

    public Expression getRight() {
        return right;
    }

    @Override
    public boolean isValid() {
        return (left == null || left.isValid()) && (right == null || right.isValid());
    }

    public BinaryOperator getOperator() {
        return operator;
    }

    private String getOperatorString() {
        switch (getOperator()) {
            case AND: {
                return "And";
            }
            case OR: {
                return "Or";
            }
            case BIT_AND: {
                return "&";
            }
            case LSHIFT: {
                return "<<";
            }
            case BIT_OR: {
                return "|";
            }
            case RSHIFT: {
                return ">>";
            }
            case URSHIFT: {
                return ">>>";
            }
            case XOR: {
                return "^";
            }
            case DIFF: {
                return "!=";
            }
            case EQ: {
                return "=";
            }
            case GT: {
                return ">";
            }
            case GE: {
                return ">=";
            }
            case LT: {
                return "<";
            }
            case LE: {
                return "<=";
            }
            case PLUS: {
                return "+";
            }
            case MINUS: {
                return "-";
            }
            case MUL: {
                return "*";
            }
            case DIV: {
                return "/";
            }
            case LIKE: {
                return "Like";
            }
            default: {
                throw new IllegalArgumentException("Not Supported Yet");
            }
        }
    }


    @Override
    public String toString() {
        String leftValue = "(" + String.valueOf(getLeft()) + ")";
        String rightValue = "(" + String.valueOf(getRight()) + ")";
        String s = leftValue + " " + getOperatorString() + " " + rightValue;
        return s;
    }

    public Expression copy() {
        BinaryOperatorExpression o = create(getOperator(), getLeft().copy(), getRight().copy());
        return o;
    }

    public static BinaryOperatorExpression create(BinaryOperator operator, Expression left, Expression right) {
        switch (operator) {
            case AND: {
                return new And(left, right);
            }
            case OR: {
                return new Or(left, right);
            }
            case BIT_AND: {
                return new BitAnd(left, right);
            }
            case BIT_OR: {
                return new BitOr(left, right);
            }
            case LSHIFT: {
                return new LShift(left, right);
            }
            case RSHIFT: {
                return new RShift(left, right);
            }
            case URSHIFT: {
                return new URShift(left, right);
            }
            case XOR: {
                return new XOr(left, right);
            }
            case DIFF: {
                return new Different(left, right);
            }
            case EQ: {
                return new Equals(left, right);
            }
            case GT: {
                return new GreaterThan(left, right);
            }
            case GE: {
                return new GreaterEqualThan(left, right);
            }
            case LT: {
                return new LessThan(left, right);
            }
            case LE: {
                return new LessEqualThan(left, right);
            }
            case PLUS: {
                return new Plus(left, right);
            }
            case MINUS: {
                return new Minus(left, right);
            }
            case MUL: {
                return new Mul(left, right);
            }
            case DIV: {
                return new Div(left, right);
            }
            case LIKE: {
                return new Like(left, right);
            }
            default: {
                throw new IllegalArgumentException("Not Supported Yet");
            }
        }
    }


}
