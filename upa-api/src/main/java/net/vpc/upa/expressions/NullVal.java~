package net.vpc.upa.expressions;


import net.vpc.upa.types.DataType;
import net.vpc.upa.types.TypesFactory;

public final class NullVal extends Function
        implements Cloneable {
    private static final long serialVersionUID = 1L;
    private DataType type;

    public NullVal(DataType type) {
        this.type = type;
    }

    @Override
    public String getName() {
        return "NullVal";
    }

    @Override
    public int getArgumentsCount() {
        return 1;
    }

    @Override
    public Expression getArgument(int index) {
        if (index != 0) {
            throw new ArrayIndexOutOfBoundsException();
        }
        return new Cst(type);
    }

//    public synchronized String toSQL(boolean integrated, PersistenceUnit database) {
//        return "nullval("+database.getPersistenceManager().getSqlTypeName(type.getType())+")";
//    }

//    public Object clone() {
//        return new NullVal(type);
//    }

    public String getDescription() {
        return "NULL";
    }

    @Override
    public Expression copy() {
        NullVal o = new NullVal(type);
        return o;
    }

    public String toString() {
        Class javaClass = type.getPlatformType();
        Integer length = type.getScale();
        int precision = type.getPrecision();

        String tname = TypesFactory.getTypeName(javaClass);
        if (tname == null) {
            tname = ("UNKNOWN_TYPE(" + javaClass.getName() + "," + length + "," + precision + ")");
        }
        if (javaClass.equals(String.class)) {
            if (length != null && length > 0) {
                tname = tname + "(" + length + ")";
            }
        }
        return "nullval(" + tname + ")";
    }
}
