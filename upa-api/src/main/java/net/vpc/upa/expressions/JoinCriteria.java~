/*
 * @author Taha BEN SALAH <taha.bensalah@gmail.com>
 */
package net.vpc.upa.expressions;

import java.io.Serializable;

public class JoinCriteria implements Serializable, Cloneable {
    private JoinType type;
    private NameOrSelect entity;
    private String alias;
    private Expression condition;

    public JoinType getJoinType() {
        return type;
    }

    public NameOrSelect getEntity() {
        return entity;
    }

    public void setEntity(NameOrSelect entity) {
        this.entity = entity;
    }

    public void setCondition(Expression condition) {
        this.condition = condition;
    }

    public String getEntityAlias() {
        return alias;
    }

    public Expression getCondition() {
        return condition;
    }

    public JoinCriteria(JoinType type, NameOrSelect entity, String alias, Expression condition) {
        this.type = type;
        this.entity = entity;
        this.alias = alias;
        this.condition = condition;
        if (type.equals(JoinType.CROSS_JOIN)) {
            this.condition = null;
        }
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        String valueString = String.valueOf(entity);
        String aliasString = getEntityAlias();
        String joinKey = "Inner Join";
        switch (getJoinType()) {
            case INNER_JOIN: // '\0'
                joinKey = "Inner Join";
                break;

            case FULL_JOIN: // '\001'
                joinKey = "Full Join";
                break;

            case LEFT_JOIN: // '\002'
                joinKey = "Left Join";
                break;

            case RIGHT_JOIN: // '\003'
                joinKey = "Right Join";
                break;

            case CROSS_JOIN: // '\003'
                joinKey = "Cross Join";
                break;
        }
        sb.append(" ").append(joinKey).append(" ").append(valueString);
        if (aliasString != null && !valueString.equals(aliasString)) {
            sb.append(" ").append(aliasString);
        }
        if (condition != null && condition.isValid()) {
            sb.append(" On ").append(condition);
        }
        return sb.toString();
    }
}
