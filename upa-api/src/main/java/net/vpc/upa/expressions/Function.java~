package net.vpc.upa.expressions;

/**
 * Created with IntelliJ IDEA. User: vpc Date: 8/16/12 Time: 10:54 PM To change
 * this template use File | Settings | File Templates.
 */
public abstract class Function extends DefaultExpression {
//    public synchronized String toSQL(boolean integrated, PersistenceUnit database) {
//        StringBuffer sb = new StringBuffer(getName()).append("(");
//        int max = getArgumentsCount();
//        boolean started = false;
//        for (int i = 0; i < max; i++) {
//            Expression e = (Expression) getArgument(i);
//            if (e.isValid()) {
//                if (started) {
//                    sb.append(" , ");
//                } else {
//                    started = true;
//                }
//                sb.append(e.toSQL(true, database));
//            }
//        }
//
//        sb.append(')');
//        return sb.toString();
//    }

    public abstract String getName();

    public abstract int getArgumentsCount();

    public abstract Expression getArgument(int index);

    public Expression[] getArguments() {
        int max = getArgumentsCount();
        Expression[] p = new Expression[max];
        for (int i = 0; i < max; i++) {
            p[i] = getArgument(i);
        }
        return p;
    }

    @Override
    public String toString() {
        StringBuilder s = new StringBuilder(getName()).append("(");
        for (int i = 0; i < getArgumentsCount(); i++) {
            if (i > 0) {
                s.append(",");
            }
            s.append(getArgument(i));
        }
        s.append(")");
        return s.toString();
    }
}
