package net.vpc.upa.expressions;

import java.util.ArrayList;

// Referenced classes of package org.vpc.lib.database.sql:
//            StatementExpression, Select, SQLContext

public class InsertSelection extends DefaultEntityStatement
        implements UpdateStatement, Cloneable {
    private static final long serialVersionUID = 1L;
    private QueryStatement selection;
    private ArrayList<Var> fields;
    private EntityName entity;
    private String alias;

    public InsertSelection() {
        selection = null;
        fields = new ArrayList<Var>(1);
    }


    public InsertSelection(InsertSelection other) {
        this();
        addQuery(other);
    }

    private InsertSelection into(String entity, String alias) {
        this.entity = new EntityName(entity);
        this.alias = alias;
        return this;
    }

    public InsertSelection into(String entity) {
        return into(entity, null);
    }

    public String getEntityName() {
        EntityName e = getEntity();
        return (e != null) ? ((EntityName) e).getName() : null;
    }

    public EntityName getEntity() {
        return entity;
    }

    public String getAlias() {
        return alias;
    }

    public int size() {
        return 3;
    }

    public InsertSelection addQuery(InsertSelection other) {
        if (other == null) {
            return this;
        }
        if (other.entity != null) {
            entity = other.entity;
        }
        if (other.alias != null) {
            alias = other.alias;
        }
        for (int i = 0; i < other.fields.size(); i++) {
            field(other.getField(i).getName());
        }

        if (other.selection != null) {
            selection = (QueryStatement) other.selection.copy();
        }
        return this;
    }

    public Expression copy() {
        InsertSelection o = new InsertSelection();
        o.addQuery(this);
        return o;
    }

    public InsertSelection field(String key) {
        fields.add(new Var(key));
        return this;
    }

    public InsertSelection field(String[] keys) {
        for (String key : keys) {
            field(key);
        }

        return this;
    }

    public InsertSelection from(QueryStatement selection) {
        this.selection = selection;
        return this;
    }

//    public synchronized String toSQL(boolean integrated, PersistenceUnit database) {
//        if (query == null) {
//            StringBuffer sb = new StringBuffer("Insert Into " + entity);
//            if (alias != null)
//                sb.append(" ").append(alias);
//            sb.append("(");
//            boolean isFirst = true;
//            for (int i = 0; i < fields.size(); i++) {
//                if (isFirst)
//                    isFirst = false;
//                else
//                    sb.append(", ");
//                sb.append(fields.get(i));
//            }
//
//            query = sb.append(") ").append(selection.toSQL(database)).toString();
//        }
//        return query;
//    }

    public int countFields() {
        return fields.size();
    }

    public Var getField(int i) {
        return fields.get(i);
    }

    public QueryStatement getSelection() {
        return selection;
    }

    @Override
    public boolean isValid() {
        return entity != null && fields.size() > 0 && selection.isValid();
    }
}
