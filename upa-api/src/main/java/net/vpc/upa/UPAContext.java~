package net.vpc.upa;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import net.vpc.upa.callback.PersistenceGroupDefinitionListener;
import net.vpc.upa.exceptions.UPAException;

import java.util.List;
import java.util.Map;
import net.vpc.upa.config.ScanFilter;
import net.vpc.upa.config.ScanSource;
import net.vpc.upa.persistence.UPAContextConfig;

/**
 * @author Taha BEN SALAH <taha.bensalah@gmail.com>
 * @creationdate 9/11/12 9:54 PM
 */
public interface UPAContext {

    /**
     * start context and load config
     *
     * @param factory
     * @throws UPAException
     */
    public void start(ObjectFactory factory) throws UPAException;

    public UPAContextFactory getFactory();

    public UPAContextConfig getBootstrapContextConfig();

    public void scan(ScanSource configurationStrategy, ScanListener listener, boolean configure);

    public PersistenceUnit getPersistenceUnit() throws UPAException;

    public List<PersistenceGroup> getPersistenceGroups() throws UPAException;

    public PersistenceGroup getPersistenceGroup() throws UPAException;

    public void setPersistenceGroup(String name) throws UPAException;

    public PersistenceGroup getPersistenceGroup(String name) throws UPAException;

    public boolean containsPersistenceGroup(String name) throws UPAException;

    public PersistenceGroup addPersistenceGroup(String name) throws UPAException;

    public void removePersistenceGroup(String name) throws UPAException;

    public void addPersistenceGroupDefinitionListener(PersistenceGroupDefinitionListener persistenceGroupDefinitionListener) throws UPAException;

    public PersistenceGroupDefinitionListener[] getPersistenceGroupDefinitionListeners();

    public void removePersistenceGroupDefinitionListener(PersistenceGroupDefinitionListener persistenceGroupDefinitionListener) throws UPAException;

    public <T> T makeSessionAware(T instance) throws UPAException;

    public <T> T makeSessionAware(T instance, Class<Annotation> sessionAwareMethodAnnotation) throws UPAException;

    public <T> T makeSessionAware(T instance, MethodFilter methodFilter) throws UPAException;

    public <T> T makeSessionAware(Class<T> type, MethodFilter methodFilter) throws UPAException;

    public <T> T invoke(Action<T> action, InvokeContext invokeContext) throws UPAException;

    public <T> T invokePrivileged(Action<T> action, InvokeContext invokeContext) throws UPAException;

    /**
     * closes context and removed all persistence groups
     *
     * @throws UPAException
     */
    public void close() throws UPAException;

    public void addCloseListener(CloseListener listener);

    public void removeCloseListener(CloseListener listener);

    public CloseListener[] getCloseListeners();

    /**
     * prepare UPA context for method invocation. This method is same as
     * beginInvocation(Map<String, Object> properties) but includes also
     * annotation configurations for the method to invoke. Actually
     * beginInvocation does not invoke the given method.
     *
     * @param method method to be invoked
     * @param properties non null Map to be shared between beginInvocation and
     * endInvocation
     */
    public void beginInvocation(Method method, Map<String, Object> properties);

    /**
     * prepare UPA context for method invocation. This will prepare session and
     * transaction Actually beginInvocation does not invoke the given method.
     *
     * @param properties non null Map to be shared between beginInvocation and
     * endInvocation
     */
    public void beginInvocation(Map<String, Object> properties);

    /**
     * finalize method invocation and catch error if not null
     *
     * @param error error if any
     * @param properties non null Map to be shared between beginInvocation and
     * endInvocation
     */
    public void endInvocation(Throwable error, Map<String, Object> properties);

    public void addContextAnnotationStrategyFilter(ScanFilter filter);

    public void removeContextAnnotationStrategyFilter(ScanFilter filter);

    public ScanFilter[] getContextAnnotationStrategyFilters();

    public Map<String, Object> getProperties();

    public void setProperties(Map<String, Object> properties);
}
