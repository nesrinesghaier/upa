package net.vpc.upa;

import net.vpc.upa.exceptions.UPAException;
import net.vpc.upa.expressions.Expression;

import java.util.List;

/**
 * @author Taha BEN SALAH <taha.bensalah@gmail.com>
 * @creationdate 9/2/12 6:30 PM
 */
public class EntityShieldAdapter implements EntityShield {

    private EntityShield base;

    public EntityShieldAdapter(EntityShield base) {
        this.base = base;
    }

    @Override
    public void init(Entity entity) throws UPAException {
        base.init(entity);
    }

    @Override
    public void checkClone(Object oldId, Object newId) throws UPAException {
        base.checkClone(oldId, newId);
    }

    @Override
    public void checkRename(Object oldId, Object newId) throws UPAException {
        base.checkRename(oldId, newId);
    }

    @Override
    public boolean isDeletableRecord(Object k, boolean recurse) throws UPAException {
        return base.isDeletableRecord(k, recurse);
    }

    @Override
    public boolean isUpdatableRecord(Object k) throws UPAException {
        return base.isUpdatableRecord(k);
    }

    @Override
    public boolean isUpdateFormulaSupported() throws UPAException {
        return base.isUpdateFormulaSupported();
    }

    @Override
    public boolean isUpdateFormulaOnPeristSupported() throws UPAException {
        return base.isUpdateFormulaOnPeristSupported();
    }

    @Override
    public boolean isUpdateFormulaOnUpdateSupported() throws UPAException {
        return base.isUpdateFormulaOnUpdateSupported();
    }

    public boolean isLockingSupported() throws UPAException {
        return base.isLockingSupported();
    }

    public boolean isPersistSupported() throws UPAException {
        return base.isPersistSupported();
    }

    public boolean isUpdateSupported() throws UPAException {
        return base.isUpdateSupported();
    }

    public boolean isDeleteSupported() throws UPAException {
        return base.isDeleteSupported();
    }

    public boolean isCloneSupported() throws UPAException {
        return base.isCloneSupported();
    }

    public boolean isRenameSupported() throws UPAException {
        return base.isRenameSupported();
    }

    public boolean isKeyEditionSupported() throws UPAException {
        return base.isKeyEditionSupported();
    }

    public boolean isNavigateSupported() throws UPAException {
        return base.isNavigateSupported();
    }

    public boolean isGeneratedId() throws UPAException {
        return base.isGeneratedId();
    }

    public Expression getFullNonDeletableRecordsExpression() throws UPAException {
        return base.getFullNonDeletableRecordsExpression();
    }

    public Expression getFullNonRenamableRecordsExpression() throws UPAException {
        return base.getFullNonRenamableRecordsExpression();
    }

    public Expression getFullNonCloneableRecordsExpression() throws UPAException {
        return base.getFullNonCloneableRecordsExpression();
    }

    public Expression getFullNonUpdatableRecordsExpression() throws UPAException {
        return base.getFullNonUpdatableRecordsExpression();
    }

    public Expression getNonDeletableRecordsExpression() throws UPAException {
        return base.getNonDeletableRecordsExpression();
    }

    public void setNonDeletableRecordsExpression(Expression expression) throws UPAException {
        base.setNonDeletableRecordsExpression(expression);
    }

    public Expression getNonUpdatableRecordsExpression() throws UPAException {
        return base.getNonUpdatableRecordsExpression();
    }

    public void setNonUpdatableRecordsExpression(Expression expression) throws UPAException {
        base.setNonUpdatableRecordsExpression(expression);
    }

    public Expression getNonRenamableRecordsExpression() throws UPAException {
        return base.getNonRenamableRecordsExpression();
    }

    public void setNonRenamableRecordsExpression(Expression expression) throws UPAException {
        base.setNonRenamableRecordsExpression(expression);
    }

    public Expression getNonCloneableRecordsExpression() throws UPAException {
        return base.getNonCloneableRecordsExpression();
    }

    public void setNonCloneableRecordsExpression(Expression expression) throws UPAException {
        base.setNonCloneableRecordsExpression(expression);
    }

    public void checkPerist(Record record) throws UPAException {
        base.checkPerist(record);
    }

    public void checkUpdate(Record updates, Expression condition) throws UPAException {
        base.checkUpdate(updates, condition);
    }

    public void checkLoad() throws UPAException {
        base.checkLoad();
    }

    public void checkNavigate() throws UPAException {
        base.checkNavigate();
    }

    public void checkDelete(Expression condition, boolean recurse) throws UPAException {
        base.checkDelete(condition, recurse);
    }

    public boolean isPeristEnabled() throws UPAException {
        return base.isPeristEnabled();
    }

    public boolean isUpdateEnabled() throws UPAException {
        return base.isUpdateEnabled();
    }

    public boolean isDeleteEnabled() throws UPAException {
        return base.isDeleteEnabled();
    }

    public boolean isRenameEnabled() throws UPAException {
        return base.isRenameEnabled();
    }

    public boolean isCloneEnabled() throws UPAException {
        return base.isCloneEnabled();
    }

    @Override
    public boolean isResetSupported() throws UPAException {
        return base.isResetSupported();
    }

    @Override
    public boolean isPrivate() throws UPAException {
        return base.isPrivate();
    }

    @Override
    public boolean isTransient() throws UPAException {
        return base.isTransient();
    }

    @Override
    public void addVeto(VetoableOperation operation, EntityShieldVeto veto) throws UPAException {
        base.addVeto(operation, veto);
    }

    @Override
    public void removeVeto(VetoableOperation operation, EntityShieldVeto veto) throws UPAException {
        base.removeVeto(operation, veto);
    }

    @Override
    public List<EntityShieldVeto> getVetoList(VetoableOperation operation) throws UPAException {
        return base.getVetoList(operation);
    }

    @Override
    public void checkInitialize() throws UPAException {
        base.checkInitialize();
    }

    @Override
    public void checkClear() throws UPAException {
        base.checkClear();
    }

    @Override
    public void checkReset() throws UPAException {
        base.checkReset();
    }

    public boolean isSystem() throws UPAException {
        return base.isSystem();
    }

}
