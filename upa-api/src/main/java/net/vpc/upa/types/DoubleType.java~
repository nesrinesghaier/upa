package net.vpc.upa.types;

public class DoubleType extends NumberType implements Cloneable {

    public static final DoubleType DEFAULT = new DoubleType(null, null, Integer.MAX_VALUE, Integer.MAX_VALUE, true, false);
    protected Double min;
    protected Double max;
    private boolean fixedDigits;
    private String userFormatName;

    public DoubleType(Double min, Double max, int before, int after, boolean nullable, boolean primitiveType) {
        this("DOUBLE", min, max, before, after, nullable, primitiveType);
    }

    /**
     * @param min minimum value (compared to value * multiplier). if null, no
     * constraints
     * @param max maximum value (compared to value * multiplier). if null, no
     * constraints
     * @param before number of digits before dot
     * @param after number of digits after dot
     * @param nullable null accept if true
     */
    public DoubleType(String name, Double min, Double max, int before, int after, boolean nullable, boolean primitiveType) {
        super(name, primitiveType ? Double.TYPE : Double.class, before + after, after, nullable);
        this.min = min;
        this.max = max;
        setDefaultNonNullValue(0.0);
    }

    public Double getMin() {
        return min;
    }

    public void setMin(Double min) {
        this.min = min;
    }

    public Double getMax() {
        return max;
    }

    public void setMax(Double max) {
        this.max = max;
    }

    public int getMaximumIntegerDigits() {
        if (getScale() == null || getPrecision() == null) {
            return -1;
        }
        return getScale() - getPrecision();
    }

    public int getMaximumFractionDigits() {
        return getPrecision();
    }

    @Override
    public void check(Object value, String name, String description)
            throws ConstraintsException {
        super.check(value, name, description);
        if (value == null) {
            return;
        }
        if (getMin() != null && (Double) value < getMin()) {
            throw new ConstraintsException("NumberTooLow", name, description, value, getMin());
        }
        if (getMax() != null && (Double) value > getMax()) {
            throw new ConstraintsException("NumberTooHigh", name, description, value, getMax());
        }
    }

    public boolean isFixedDigits() {
        return fixedDigits;
    }

    public void setFixedDigits(boolean fixedDigits) {
        this.fixedDigits = fixedDigits;
    }

    public String getUserFormatName() {
        return userFormatName;
    }

    public void setUserFormatName(String userFormatName) {
        this.userFormatName = userFormatName;
    }

    @Override
    public String toString() {
        StringBuilder s = new StringBuilder("DoubleType");
        if (min != null || max != null) {
            s.append("[");
            if (min != null) {
                s.append(min);
            }
            s.append("...");
            if (max != null) {
                s.append(max);
            }
            s.append("]");
        }
        return s.toString();
    }

    @Override
    public Number parse(String value) {
        if (value == null || value.trim().isEmpty()) {
            return null;
        }
        return Double.parseDouble(value);
    }

}
