package net.vpc.upa.types;

import net.vpc.upa.PortabilityHint;

import java.math.BigDecimal;

@PortabilityHint(target = "C#", name = "suppress") //no supported
public class BigDecimalType extends NumberType implements Cloneable {

    public static final BigDecimalType DEFAULT = new BigDecimalType(null, null, Integer.MAX_VALUE, Integer.MAX_VALUE, true);
    protected BigDecimal min;
    protected BigDecimal max;
    private boolean fixedDigits;

    public BigDecimalType(BigDecimal min, BigDecimal max, int before, int after, boolean nullable) {
        this("DEFAULT", min, max, before, after, nullable);
    }

    /**
     * @param min      minimum value (compared to value * multiplier). if null, no
     *                 constraints
     * @param max      maximum value (compared to value * multiplier). if null, no
     *                 constraints
     * @param before   number of digits before dot
     * @param after    number of digits after dot
     * @param nullable null accept if true
     */
    public BigDecimalType(String name, BigDecimal min, BigDecimal max, int before, int after, boolean nullable) {
        super(name, BigDecimal.class, before + after, after, nullable);
        this.min = min;
        this.max = max;
        setDefaultNonNullValue(BigDecimal.ZERO);
    }

    public BigDecimal getMin() {
        return min;
    }

    public void setMin(BigDecimal min) {
        this.min = min;
    }

    public BigDecimal getMax() {
        return max;
    }

    public void setMax(BigDecimal max) {
        this.max = max;
    }

    public int getMaximumIntegerDigits() {
        if (getScale() == null || getPrecision() == null) {
            return -1;
        }
        return getScale() - getPrecision();
    }

    public int getMaximumFractionDigits() {
        return getPrecision();
    }

    @Override
    public void check(Object value, String name, String description)
            throws ConstraintsException {
        super.check(value, name, description);
        if (value == null) {
            return;
        }
        if (getMin() != null && ((BigDecimal) value).compareTo(getMin()) < 0) {
            BigDecimal limit = getMin();
            throw new ConstraintsException("NumberTooLow", name, description, value, limit);
        }
        if (getMax() != null && ((BigDecimal) value).compareTo(getMax()) > 0) {
            BigDecimal limit = getMax();
            throw new ConstraintsException("NumberTooHigh", name, description, value, limit);
        }
    }

    public boolean isFixedDigits() {
        return fixedDigits;
    }

    public void setFixedDigits(boolean fixedDigits) {
        this.fixedDigits = fixedDigits;
    }

    @Override
    public String toString() {
        return "BigDecimalType{" + "min=" + min + ", max=" + max + ", fixedDigits=" + fixedDigits + '}';
    }

    @Override
    public Number parse(String value) {
        if (value == null || value.trim().isEmpty()) {
            return null;
        }
        return new BigDecimal(value);
    }
    
    
}
