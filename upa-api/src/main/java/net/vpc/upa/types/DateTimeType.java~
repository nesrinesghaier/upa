package net.vpc.upa.types;

import net.vpc.upa.PortabilityHint;

import java.util.Calendar;

public class DateTimeType extends TemporalType implements Cloneable {

    public static final DateTimeType DEFAULT = new DateTimeType("DATE", DateTime.class, null, null, true);

    @PortabilityHint(target = "C#", name = "suppress")
    public static final DateTimeType JAVA_UTIL = new DateTimeType("DATE", java.util.Date.class, null, null, true);

    protected DateTime min = null;
    protected DateTime max = null;

    public DateTimeType(String name, Class<? extends java.util.Date> type, boolean nullable) {
        this(name, type, null, null, nullable);
    }

    public DateTimeType(String name, Class<? extends java.util.Date> type, DateTime min, DateTime max, boolean nullable) {
        super(name, type == null ? DateTime.class : type, 0, 0, nullable);
        if (type != null && !type.equals(DateTime.class) && !type.equals(java.util.Date.class) && !type.equals(java.sql.Timestamp.class)) {
            throw new IllegalArgumentException("Invalid Temporal Type " + type);
        }
        this.min = min;
        this.max = max;
        setDefaultNonNullValue(convert(new java.util.Date(0, 0, 1)));
    }

    public DateTime getMin() {
        return min;
    }

    public DateTime getMax() {
        return max;
    }

    public void setMin(DateTime newMin) {
        min = newMin;
    }

    public void setMax(DateTime newMax) {
        max = newMax;
    }

    @Override
    public void check(Object value, String name, String description) throws ConstraintsException {
        super.check(value, name, description);
        if (value == null) {
            return;
        }
        if (getMin() != null && getMin().compareTo((java.util.Date) value) > 0) {
            throw new ConstraintsException("DateTooEarly", name, description, value, min);
        }
        if (getMax() != null && getMax().compareTo((java.util.Date) value) < 0) {
            throw new ConstraintsException("DateTooLate", name, description, value, max);
        }
    }

    @Override
    public Object convert(Object value) {
        if (value == null) {
            return null;
        }
        if (value instanceof java.util.Date) {
            return validateDate((java.util.Date) value);
        }
        return super.convert(value);
    }


    public java.util.Date validateDate(java.util.Date date) {
        if (date == null) {
            return null;
        }

        Class type = getPlatformType();

        Calendar c = Calendar.getInstance();
        c.setTime(date);
        long time = date.getTime();
        if (DateTime.class.isAssignableFrom(type)) {
            return new DateTime(time);
        } else if (java.util.Date.class.isAssignableFrom(type)) {
            return new java.util.Date(time);
        } else {
            throw new IllegalArgumentException();
        }
    }
}
