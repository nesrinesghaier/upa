package net.vpc.upa.types;

import java.util.Calendar;

/**
 * User: taha
 * Date: 5 sept. 2003
 * Time: 13:02:55
 */
public class Year extends Temporal {
    public static final long serialVersionUID = 1L;

    public Year() {
        this(System.currentTimeMillis());
    }

    public Year(int gregorianYear) {
        this(validateTime(gregorianYear));
    }


    public Year(java.util.Date date) {
        this(date.getTime());
    }

    public Year(long date) {
        super(validateTime(date));
    }

    public int getGregorianYear() {
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(getTime());
        return calendar.get(Calendar.YEAR);
    }

    public static long validateTime(int year) {
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.YEAR, year);
        calendar.set(Calendar.MONTH, 0);
        calendar.set(Calendar.DAY_OF_MONTH, 1);
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
//        if (!startPeriod) {
//            calendar.add(Calendar.MONTH, 1);
//            calendar.add(Calendar.MILLISECOND, -1);
//        }
        return calendar.getTime().getTime();
    }

    private static long validateTime(long time) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(time);
        calendar.set(Calendar.MONTH, 0);
        calendar.set(Calendar.DAY_OF_MONTH, 1);
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
//        if (!startPeriod) {
//            calendar.add(Calendar.YEAR, +1);
//            calendar.add(Calendar.MILLISECOND, -1);
//        }
        return calendar.getTime().getTime();
    }

    public Year nextYear() {
        return getRelativeYear(1);
    }

    public Year getRelativeYear(int relative) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(getTime());
        calendar.add(Calendar.YEAR, relative);
        return new Year(calendar.getTime());
    }

    public Year previousYear() {
        return getRelativeYear(-1);
    }

//    public Year getStartPeriodYear(boolean start) {
//        if (start == isStartPeriod()) {
//            return this;
//        } else {
//            return new Year(this, start);
//        }
//    }

    @Override
    public String toString() {
        Calendar c = Calendar.getInstance();
        c.setTime(this);
        int year = c.get(Calendar.YEAR) + 1900;
        char[] buf = "2000".toCharArray();
        buf[0] = (char) ('0' + (year / 1000));
        buf[1] = (char) (((year / 100) % 10));
        buf[2] = (char) (((year / 10) % 10));
        buf[3] = (char) ((year % 10));
        return new String(buf);
    }
}
