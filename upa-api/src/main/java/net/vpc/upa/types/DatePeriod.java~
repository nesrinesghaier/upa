package net.vpc.upa.types;

import net.vpc.upa.PortabilityHint;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;

/**
 * Created by IntelliJ IDEA.
 * User: root
 * Date: 29 avr. 2003
 * Time: 09:16:24
 * To change this template use Options | File Templates.
 */
@PortabilityHint(target = "C#", name = "partial")
public class DatePeriod implements Serializable {
    private int count;
    private PeriodOption periodType;

    public DatePeriod(int count, PeriodOption type) {
        this.count = count;
        this.periodType = type;
    }

    public int getCount() {
        return count;
    }

    public PeriodOption getPeriodType() {
        return periodType;
    }

    @Override
    public String toString() {
        return count + " " + periodType.name();
    }

    @Override
    public int hashCode() {
        return count + 31 * periodType.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        DatePeriod datePeriod = (DatePeriod) obj;
        return (count == datePeriod.count) && (periodType == datePeriod.periodType);
    }

    @PortabilityHint(target = "C#", name = "ignore")
    public int compare(DatePeriod other, Date startDate) {
        Calendar c = Calendar.getInstance();
        c.setTime(startDate);
        switch (periodType) {
            case DAY: {
                c.add(Calendar.DATE, count);
                break;
            }
            case MONTH: {
                c.add(Calendar.MONTH, count);
                break;
            }
            case YEAR: {
                c.add(Calendar.YEAR, count);
                break;
            }
        }
        long d1 = c.getTime().getTime();
        c.setTime(startDate);
        switch (other.periodType) {
            case DAY: {
                c.add(Calendar.DATE, other.count);
                break;
            }
            case MONTH: {
                c.add(Calendar.MONTH, other.count);
                break;
            }
            case YEAR: {
                c.add(Calendar.YEAR, other.count);
                break;
            }
        }
        long d2 = c.getTime().getTime();
        return d1 == d2 ? 0 : d1 > d2 ? 1 : -1;
    }

    @PortabilityHint(target = "C#", name = "ignore")
    public Date next(Date startDate) {
        Calendar c = Calendar.getInstance();
        c.setTime(startDate);
        switch (periodType) {
            case DAY: {
                c.add(Calendar.DATE, count);
                break;
            }
            case MONTH: {
                c.add(Calendar.MONTH, count);
                break;
            }
            case YEAR: {
                c.add(Calendar.YEAR, count);
                break;
            }
        }
        return c.getTime();
    }
}
