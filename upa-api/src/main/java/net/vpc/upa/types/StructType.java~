package net.vpc.upa.types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StructType extends DataType implements Cloneable {
    public static final Object OLD_VALUE = new Object();
    private Map<String, DataType> elementsMap = new HashMap<String, DataType>();
    private List<String> elementsList = new ArrayList<String>();

    public StructType(String name, Class clazz, String[] fieldNames, DataType[] datatypes, boolean nullable) {
        super(name, clazz, datatypes.length, 0, nullable);
        if (fieldNames.length != datatypes.length) {
            throw new IllegalArgumentException();
        }
        for (int i = 0; i < fieldNames.length; i++) {
            if (elementsMap.containsKey(fieldNames[i])) {
                throw new IllegalArgumentException();
            }
            elementsMap.put(fieldNames[i], datatypes[i]);
            elementsList.add(fieldNames[i]);
        }
    }

    public DataType getItemDataTypeAt(int index) {
        return elementsMap.get(elementsList.get(index));
    }

    public String getItemNameAt(int index) {
        return elementsList.get(index);
    }

    public int indexOf(String name) {
        return elementsList.indexOf(name);
    }

    public int getItemsCount() {
        return elementsList.size();
    }

    @Override
    public void check(Object value, String name, String description) throws ConstraintsException {
        super.check(value, name, description);
        Object[] val = getArrayForObject(value);
        int max = elementsList.size();
        if (value != null) {
            for (int i = 0; i < max; i++) {
                if (!OLD_VALUE.equals(val[i])) {
                    getItemDataTypeAt(i).check(val[i], null, null);
                }
            }
        } else {
//            for(int i=0;i<max;i++){
//                getItemDataTypeAt(i).check(null);
//            }
        }
    }

    public Object getItemValueAt(int index, Object value) {
        return value == null ? null : ((Object[]) value)[index];
    }

    public Map<String, Object> getItemValuesMap(Map<String, Object> map, Object value) {
        if (map == null) {
            map = new HashMap<String, Object>();
        }
        int max = getItemsCount();
        if (value != null) {
            for (int i = 0; i < max; i++) {
                map.put(getItemNameAt(i), getItemValueAt(i, value));
            }
        } else {
            for (int i = 0; i < max; i++) {
                map.put(getItemNameAt(i), null);
            }
        }
        return map;
    }

    public Object getItemValue(String fieldName, Object value) {
        return getItemValueAt(indexOf(fieldName), value);
    }

//    public DataTypeView getViewObject(Object modelValue) {
//        return new StructView(modelValue);
//    }
//
//    public class StructView extends DataTypeView{
//        public  StructView(Object value){
//            super(StructType.this,value,null,Resources.loadImageIcon("/images/net/vpc/swing/TypeObject.gif"),SwingConstants.LEFT);
//        }
//        public String getString(){
//            Object o=getObject();
//            return o==null ? "" :o.toString();
//        }
//    }

    public Object getObjectForArray(Object[] value) {
        return value;
    }

    public Object[] getArrayForObject(Object value) {
        return (Object[]) value;
    }

}
