package net.vpc.upa.types;

import java.util.Calendar;

public class YearType extends TemporalType implements Cloneable {
    public static final YearType DEFAULT = new YearType("YEAR", null, true);
    protected Year min = null;
    protected Year max = null;

    public YearType(String name, Class<? extends java.util.Date> type, boolean nullable) {
        this(name, type, null, null, nullable);
    }

    public YearType(String name, Class<? extends java.util.Date> type, Year min, Year max, boolean nullable) {
        super(name, type == null ? Year.class : type, 0, 0, nullable);
        if (type != null && !type.equals(Year.class) && !type.equals(java.util.Date.class)) {
            throw new IllegalArgumentException("Invalid Temporal Type " + type);
        }
        this.min = min;
        this.max = max;
        setDefaultNonNullValue(convert(new java.util.Date(0, 0, 1)));
    }

    public Year getMin() {
        return min;
    }

    public void setMin(Year newMin) {
        min = newMin;
    }

    public Year getMax() {
        return max;
    }

    public void setMax(Year newMax) {
        max = newMax;
    }

    @Override
    public void check(Object value, String name, String description) throws ConstraintsException {
        super.check(value, name, description);
        if (value == null) {
            return;
        }
        if (getMin() != null && getMin().compareTo((java.util.Date) value) > 0) {
            throw new ConstraintsException("DateTooEarly", name, description, value, min);
        }
        if (getMax() != null && getMax().compareTo((java.util.Date) value) < 0) {
            throw new ConstraintsException("DateTooLate", name, description, value, max);
        }
    }

    @Override
    public Object convert(Object value) {
        if (value == null) {
            return null;
        }
        if (value instanceof java.util.Date) {
            return validateDate((java.util.Date) value);
        }
        return super.convert(value);
    }

    public java.util.Date validateDate(java.util.Date date) {
        if (date == null) {
            return null;
        }

        Class type = getPlatformType();

        Calendar c = Calendar.getInstance();
        c.setTime(date);
        long time = date.getTime();

        if (Year.class.isAssignableFrom(type)) {
            return new Year(time);
        } else if (java.util.Date.class.isAssignableFrom(type)) {
            return new java.util.Date(time);
        } else {
            throw new IllegalArgumentException();
        }
    }
}
