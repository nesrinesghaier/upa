package net.vpc.upa.types;

import net.vpc.upa.PortabilityHint;

import java.io.*;
import java.net.URL;

@PortabilityHint(target = "C#", name = "partial")
public class FileData implements Serializable {
    @PortabilityHint(target = "C#", name = "suppress")
    public static final long serialVersionUID = 1L;
    protected byte[] data;
    protected String sourceName;

    public FileData(String sourceName, byte[] data) {
        this.sourceName = sourceName;
        this.data = data != null ? data : new byte[0];
    }

    @PortabilityHint(target = "C#", name = "suppress")
    public FileData(File file) throws IOException {
        load(file.getName(), new FileInputStream(file));
    }

    public FileData(InputStream inputStream) throws IOException {
        load(null, inputStream);
    }

    @PortabilityHint(target = "C#", name = "suppress")
    public FileData(String file) throws IOException {
        load(file, new FileInputStream(file));
    }

    public FileData(URL url) throws IOException {
        load(getURLName(url), url.openStream());
    }

    public byte[] getData() {
        return data;
    }

    @PortabilityHint(target = "C#", name = "suppress")
    private synchronized void load(String src, InputStream inputStream) throws IOException {
        if (inputStream == null) {
            data = null;
            sourceName = src;
        } else {
            data = new byte[inputStream.available()];
            inputStream.read(data);
            sourceName = src;
        }
    }

    @PortabilityHint(target = "C#", name = "ignore")
    public void save(File file) throws IOException {
        file.getParentFile().mkdirs();
        save(new FileOutputStream(file));
    }

    @PortabilityHint(target = "C#", name = "ignore")
    public void save(OutputStream outputStream) throws IOException {
        outputStream.write(getData());
    }

    @PortabilityHint(target = "C#", name = "ignore")
    public void save(String file) throws IOException {
        (new File(file)).getParentFile().mkdirs();
        save(((OutputStream) (new FileOutputStream(file))));
    }

    @PortabilityHint(target = "C#", name = "suppress")
    public void save(URL url) throws IOException {
        save(url.openConnection().getOutputStream());
    }

    public long size() {
        return data != null ? data.length : -1L;
    }

    public String getSourceName() {
        return sourceName;
    }

    public String getFileType() {
        return sourceName == null ? null : getFileExtension(sourceName);
    }

    private static String getFileExtension(String fileName) {
        int x = fileName.lastIndexOf('.');
        if (x > 0) {
            if (x + 1 < fileName.length()) {
                return fileName.substring(x + 1);
            } else {
                return "";
            }
        } else {
            return "";
        }
    }

    private String getURLName(URL url) {
        String p = url.getPath();
        int slash = p.lastIndexOf('/');
        if (slash < 0) {
            slash = p.lastIndexOf(':');
        }
        return slash == 0 ? p : p.substring(slash);
    }
}
