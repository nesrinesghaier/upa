package net.vpc.upa;

import java.io.Serializable;
import java.util.Date;

/**
 * Key is an abstract definition of any identifier on any entity. Keys can be composed.
 * Thus Key is defined as an Array of Objects and should be manipulated as such even though Identifier would be single, non composed value.
 * When Entity defines a single field as Identifier, Key represents an Array of One Single Element.
 *
 * @author Taha BEN SALAH <taha.bensalah@gmail.com>
 */
public interface Key extends Serializable {

    /**
     * Update all Key values. <code>value</value> cannot be null and cannot contain null values
     *
     * @param value new values
     */
    public void setValue(Object[] value);

    /**
     * an array of key values. The returned array cannot be null and cannot contain null values
     *
     * @return an array of key values
     */
    public Object[] getValue();

    /**
     * Key as single value
     *
     * @return single instance as Object
     * @throws RuntimeException if multi-dimensional key
     */
    public Object getObject();

    /**
     * Key as single String value
     *
     * @return single instance as String
     * @throws RuntimeException if multi-dimensional key
     */
    public String getString();

    /**
     * Key as single int value
     *
     * @return single instance as int
     * @throws RuntimeException if multi-dimensional key
     */
    public int getInt();

    /**
     * Key as single long value
     *
     * @return single instance as long
     * @throws RuntimeException if multi-dimensional key
     */
    public long getLong();

    /**
     * Key as single date value
     *
     * @return single instance as date
     * @throws RuntimeException if multi-dimensional key
     */
    public Date getDate();

    /**
     * Key portion at <code>index</code> position as string value
     *
     * @param index position
     * @return Key portion at <code>index</code> position as string value
     * @throws RuntimeException if invalid <code>index</code>
     */
    public String getStringAt(int index);

    /**
     * Key portion at <code>index</code> position as Object value
     *
     * @param index position
     * @return Key portion at <code>index</code> position as Object value
     * @throws RuntimeException if invalid <code>index</code>
     */
    public Object getObjectAt(int index);

    /**
     * Key portion at <code>index</code> position as int value
     *
     * @param index position
     * @return Key portion at <code>index</code> position as int value
     * @throws RuntimeException if invalid <code>index</code>
     */
    public int getIntAt(int index);

    /**
     * Key portion at <code>index</code> position as long value
     *
     * @param index position
     * @return Key portion at <code>index</code> position as long value
     * @throws RuntimeException if invalid <code>index</code>
     */
    public long getLongAt(int index);

    /**
     * Key portion at <code>index</code> position as date value
     *
     * @param index position
     * @return Key portion at <code>index</code> position as date value
     * @throws RuntimeException if invalid <code>index</code>
     */
    public Date getDateAt(int index);
}
