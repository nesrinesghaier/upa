package net.vpc.upa.extensions;

import net.vpc.upa.Key;
import net.vpc.upa.Relationship;
import net.vpc.upa.exceptions.UPAException;
import net.vpc.upa.expressions.Expression;

import java.util.List;

/**
 * @author Taha BEN SALAH <taha.bensalah@gmail.com>
 * @creationdate 8/28/12 8:28 PM
 */
public interface HierarchyExtension extends RelationshipExtensionDefinition{

    public void setHierarchyPathSeparator(String hierarchySeparator);
    
    public String getHierarchyPathSeparator();

    public String getHierarchyPathField();

    public void setHierarchyPathField(String hierarchyPathField);

    boolean isParent(Object parentId, Object childId) throws UPAException;

    boolean isEqualOrIsParent(Object parentId, Object childId) throws UPAException;

    public Relationship getTreeRelationship() throws UPAException;

    public Expression createFindRootsExpression(String alias) throws UPAException;

    public Expression createFindDeepChildrenExpression(String expression, Object id, boolean includeId) throws UPAException;

    public Expression createFindImmediateChildrenExpression(String alias, Object id) throws UPAException;

    public Expression createFindEntityByMainPathExpression(String mainFieldPath, String entityAlias) throws UPAException;

    public Expression createFindEntityByIdPathExpression(Object[] idPath, String entityAlias) throws UPAException;

    public Expression createFindEntityByKeyPathExpression(Key[] keyPath, String entityAlias) throws UPAException;

    public Object findEntityByMainPath(String mainFieldPath) throws UPAException;

    public Object findEntityByIdPath(Object[] idPath) throws UPAException;

    public Object findEntityByKeyPath(Key[] keyPath) throws UPAException;

    public <T> List<T> findRootsEntityList() throws UPAException;

    public <T> List<T> findDeepChildrenEntityList(Object id, boolean includeId) throws UPAException;

    public <T> List<T> findImmediateChildrenEntityList(Object id) throws UPAException;
}
