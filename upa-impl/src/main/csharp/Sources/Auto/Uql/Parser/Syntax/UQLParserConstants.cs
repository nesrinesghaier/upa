/*********************************************************
 *********************************************************
 **   DO NOT EDIT                                       **
 **                                                     **
 **   THIS FILE AS BEEN GENERATED AUTOMATICALLY         **
 **   BY UPA PORTABLE GENERATOR                         **
 **   (c) vpc                                           **
 **                                                     **
 *********************************************************
 ********************************************************/



namespace Net.Vpc.Upa.Impl.Uql.Parser.Syntax
{

    /**
     * Token literal values and constants.
     * Generated by org.javacc.parser.OtherFilesGen#start()
     */
    public interface UQLParserConstants {
    }
    public class UQLParserConstantsIHelper
    {
        /** End of File. */
        public const int EOF = 0;/** RegularExpression Id. */
        public const int SELECT = 6;/** RegularExpression Id. */
        public const int UPDATE = 7;/** RegularExpression Id. */
        public const int DELETE = 8;/** RegularExpression Id. */
        public const int INSERT = 9;/** RegularExpression Id. */
        public const int SET = 10;/** RegularExpression Id. */
        public const int FROM = 11;/** RegularExpression Id. */
        public const int WHERE = 12;/** RegularExpression Id. */
        public const int AND = 13;/** RegularExpression Id. */
        public const int OR = 14;/** RegularExpression Id. */
        public const int IF = 15;/** RegularExpression Id. */
        public const int THEN = 16;/** RegularExpression Id. */
        public const int SWITCH = 17;/** RegularExpression Id. */
        public const int CASE = 18;/** RegularExpression Id. */
        public const int ELSE = 19;/** RegularExpression Id. */
        public const int ELSEIF = 20;/** RegularExpression Id. */
        public const int END = 21;/** RegularExpression Id. */
        public const int TRUE = 22;/** RegularExpression Id. */
        public const int FALSE = 23;/** RegularExpression Id. */
        public const int NULL = 24;/** RegularExpression Id. */
        public const int ORDER = 25;/** RegularExpression Id. */
        public const int GROUP = 26;/** RegularExpression Id. */
        public const int BY = 27;/** RegularExpression Id. */
        public const int DESC = 28;/** RegularExpression Id. */
        public const int ASC = 29;/** RegularExpression Id. */
        public const int INNER = 30;/** RegularExpression Id. */
        public const int LEFT = 31;/** RegularExpression Id. */
        public const int RIGHT = 32;/** RegularExpression Id. */
        public const int FULL = 33;/** RegularExpression Id. */
        public const int CROSS = 34;/** RegularExpression Id. */
        public const int JOIN = 35;/** RegularExpression Id. */
        public const int HAVING = 36;/** RegularExpression Id. */
        public const int ON = 37;/** RegularExpression Id. */
        public const int NOT = 38;/** RegularExpression Id. */
        public const int LIKE = 39;/** RegularExpression Id. */
        public const int IN = 40;/** RegularExpression Id. */
        public const int DISTINCT = 41;/** RegularExpression Id. */
        public const int TOP = 42;/** RegularExpression Id. */
        public const int INTEGER_LITERAL = 43;/** RegularExpression Id. */
        public const int DECIMAL_LITERAL = 44;/** RegularExpression Id. */
        public const int HEX_LITERAL = 45;/** RegularExpression Id. */
        public const int OCTAL_LITERAL = 46;/** RegularExpression Id. */
        public const int FLOATING_POINT_LITERAL = 47;/** RegularExpression Id. */
        public const int EXPONENT = 48;/** RegularExpression Id. */
        public const int CHARACTER_LITERAL = 49;/** RegularExpression Id. */
        public const int STRING_LITERAL = 50;/** RegularExpression Id. */
        public const int IDENTIFIER = 51;/** RegularExpression Id. */
        public const int LETTER = 52;/** RegularExpression Id. */
        public const int PART_LETTER = 53;/** RegularExpression Id. */
        public const int LPAREN = 54;/** RegularExpression Id. */
        public const int RPAREN = 55;/** RegularExpression Id. */
        public const int LBRACE = 56;/** RegularExpression Id. */
        public const int RBRACE = 57;/** RegularExpression Id. */
        public const int LBRACKET = 58;/** RegularExpression Id. */
        public const int RBRACKET = 59;/** RegularExpression Id. */
        public const int SEMICOLON = 60;/** RegularExpression Id. */
        public const int COMMA = 61;/** RegularExpression Id. */
        public const int DOT = 62;/** RegularExpression Id. */
        public const int EQ2 = 63;/** RegularExpression Id. */
        public const int GT = 64;/** RegularExpression Id. */
        public const int LT = 65;/** RegularExpression Id. */
        public const int BANG = 66;/** RegularExpression Id. */
        public const int TILDE = 67;/** RegularExpression Id. */
        public const int HOOK = 68;/** RegularExpression Id. */
        public const int COLON = 69;/** RegularExpression Id. */
        public const int EQ = 70;/** RegularExpression Id. */
        public const int LE = 71;/** RegularExpression Id. */
        public const int GE = 72;/** RegularExpression Id. */
        public const int NE = 73;/** RegularExpression Id. */
        public const int NE2 = 74;/** RegularExpression Id. */
        public const int SC_OR = 75;/** RegularExpression Id. */
        public const int SC_AND = 76;/** RegularExpression Id. */
        public const int INCR = 77;/** RegularExpression Id. */
        public const int DECR = 78;/** RegularExpression Id. */
        public const int PLUS = 79;/** RegularExpression Id. */
        public const int MINUS = 80;/** RegularExpression Id. */
        public const int STAR = 81;/** RegularExpression Id. */
        public const int SLASH = 82;/** RegularExpression Id. */
        public const int BIT_AND = 83;/** RegularExpression Id. */
        public const int BIT_OR = 84;/** RegularExpression Id. */
        public const int XOR = 85;/** RegularExpression Id. */
        public const int REM = 86;/** RegularExpression Id. */
        public const int LSHIFT = 87;/** RegularExpression Id. */
        public const int RSIGNEDSHIFT = 88;/** RegularExpression Id. */
        public const int RUNSIGNEDSHIFT = 89;/** Lexical state. */
        public const int DEFAULT = 0;/** Literal token values. */
        public static readonly string[] tokenImage = { "<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"", "\"\\f\"", "\"select\"", "\"update\"", "\"remove\"", "\"insert\"", "\"set\"", "\"from\"", "\"where\"", "\"and\"", "\"or\"", "\"if\"", "\"then\"", "\"switch\"", "\"case\"", "\"else\"", "\"elseif\"", "\"end\"", "\"true\"", "\"false\"", "\"null\"", "\"order\"", "\"group\"", "\"by\"", "\"desc\"", "\"asc\"", "\"inner\"", "\"left\"", "\"right\"", "\"full\"", "\"cross\"", "\"join\"", "\"having\"", "\"on\"", "\"not\"", "\"like\"", "\"in\"", "\"distinct\"", "\"top\"", "<INTEGER_LITERAL>", "<DECIMAL_LITERAL>", "<HEX_LITERAL>", "<OCTAL_LITERAL>", "<FLOATING_POINT_LITERAL>", "<EXPONENT>", "<CHARACTER_LITERAL>", "<STRING_LITERAL>", "<IDENTIFIER>", "<LETTER>", "<PART_LETTER>", "\"(\"", "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\";\"", "\",\"", "\".\"", "\"=\"", "\">\"", "\"<\"", "\"!\"", "\"~\"", "\"?\"", "\":\"", "\"==\"", "\"<=\"", "\">=\"", "\"!=\"", "\"<>\"", "\"||\"", "\"&&\"", "\"++\"", "\"--\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"", "\"&\"", "\"|\"", "\"^\"", "\"%\"", "\"<<\"", "\">>\"", "\">>>\"" };
    }
}
